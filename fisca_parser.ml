type token =
  | EOF
  | INT of (string)
  | FLOAT of (string)
  | STRING of (string)
  | BOOL of (string)
  | IDENT of (string)
  | AMPER
  | AMPER_AMPER
  | BAR
  | BAR_BAR
  | CLOSE_BRACE
  | CLOSE_BRACKET
  | CLOSE_PAREN
  | COMMA
  | COLON
  | DOT
  | DOT_DOT
  | EQUAL
  | GREATER
  | GREATER_EQUAL
  | LESS
  | LESS_EQUAL
  | LESS_GREATER
  | LESS_MINUS
  | NOT
  | ONE_BAR
  | OPEN_BRACE
  | OPEN_BRACKET
  | OPEN_PAREN
  | PLUS
  | MINUS
  | MINUS_GREATER
  | SEMI_COLON
  | SHARP
  | SLASH
  | STAR
  | TO
  | DEF
  | ELSE
  | IF
  | PI
  | SIGMA
  | THEN
  | WHEN
  | WITH

open Parsing;;
let _ = parse_error;;
# 16 "fisca_parser.mly"

(* Prelude part: this is pure Caml *)

open Fisca_types;;

let make_comparison co e1 e2 = Comparison (co, e1, e2);;

let make_reduce_definition ident from_e1 to_e2 expression =
  {
    reduce_variable = ident;
    reduce_from = from_e1;
    reduce_to = to_e2;
    reduce_body = expression;
  }
;;


# 69 "fisca_parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  262 (* AMPER *);
  263 (* AMPER_AMPER *);
  264 (* BAR *);
  265 (* BAR_BAR *);
  266 (* CLOSE_BRACE *);
  267 (* CLOSE_BRACKET *);
  268 (* CLOSE_PAREN *);
  269 (* COMMA *);
  270 (* COLON *);
  271 (* DOT *);
  272 (* DOT_DOT *);
  273 (* EQUAL *);
  274 (* GREATER *);
  275 (* GREATER_EQUAL *);
  276 (* LESS *);
  277 (* LESS_EQUAL *);
  278 (* LESS_GREATER *);
  279 (* LESS_MINUS *);
  280 (* NOT *);
  281 (* ONE_BAR *);
  282 (* OPEN_BRACE *);
  283 (* OPEN_BRACKET *);
  284 (* OPEN_PAREN *);
  285 (* PLUS *);
  286 (* MINUS *);
  287 (* MINUS_GREATER *);
  288 (* SEMI_COLON *);
  289 (* SHARP *);
  290 (* SLASH *);
  291 (* STAR *);
  292 (* TO *);
  293 (* DEF *);
  294 (* ELSE *);
  295 (* IF *);
  296 (* PI *);
  297 (* SIGMA *);
  298 (* THEN *);
  299 (* WHEN *);
  300 (* WITH *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* STRING *);
  260 (* BOOL *);
  261 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\005\000\006\000\006\000\
\006\000\007\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\008\000\
\008\000\008\000\000\000"

let yylen = "\002\000\
\002\000\000\000\003\000\001\000\001\000\007\000\000\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
\002\000\002\000\003\000\003\000\003\000\003\000\002\000\003\000\
\003\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\008\000\004\000\008\000\004\000\003\000\006\000\003\000\000\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\011\000\012\000\013\000\014\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\000\000\000\000\000\000\005\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\010\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\034\000\
\016\000\000\000\000\000\000\000\000\000\042\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\017\000\018\000\019\000\053\000\021\000\074\000\061\000\054\000"

let yysindex = "\001\000\
\067\255\000\000\000\000\000\000\000\000\000\000\000\000\097\255\
\097\255\097\255\097\255\097\255\255\254\097\255\000\255\001\255\
\000\000\012\000\240\254\001\002\000\000\046\002\000\000\113\001\
\242\254\242\254\245\254\121\000\252\254\097\255\254\254\097\255\
\000\000\067\255\097\255\097\255\017\255\097\255\097\255\097\255\
\097\255\097\255\097\255\097\255\097\255\097\255\097\255\097\255\
\000\000\021\255\097\255\097\255\137\001\018\255\097\255\019\255\
\000\000\025\002\001\002\000\000\000\000\100\255\100\255\100\255\
\100\255\100\255\100\255\020\255\045\255\045\255\242\254\242\254\
\023\255\046\255\057\001\161\001\097\255\000\000\185\001\000\000\
\000\000\021\255\044\255\097\255\097\255\000\000\097\255\000\000\
\097\255\001\002\209\001\233\001\001\002\097\255\097\255\242\254\
\242\254"

let yyrindex = "\000\000\
\062\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\255\000\000\011\255\000\000\000\000\
\132\255\164\255\000\000\000\000\000\000\052\255\000\000\052\255\
\000\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\255\000\000\000\000\000\000\000\000\
\000\000\053\255\000\000\000\000\054\255\000\000\000\000\000\000\
\000\000\043\255\068\001\000\000\000\000\152\000\179\000\206\000\
\233\000\004\001\031\001\000\000\068\000\095\000\196\255\228\255\
\055\255\000\000\000\000\000\000\052\255\000\000\000\000\000\000\
\000\000\053\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\001\000\000\000\000\042\255\000\000\000\000\004\000\
\036\000"

let yygindex = "\000\000\
\000\000\042\000\000\000\255\255\000\000\251\255\000\000\227\255"

let yytablesize = 849
let yytable = "\020\000\
\037\000\001\000\056\000\027\000\029\000\031\000\022\000\023\000\
\024\000\025\000\026\000\033\000\028\000\044\000\068\000\034\000\
\050\000\023\000\052\000\023\000\055\000\060\000\023\000\023\000\
\023\000\073\000\023\000\030\000\032\000\078\000\080\000\081\000\
\020\000\058\000\059\000\082\000\062\000\063\000\064\000\065\000\
\066\000\067\000\023\000\069\000\070\000\071\000\072\000\086\000\
\023\000\075\000\076\000\025\000\023\000\079\000\025\000\025\000\
\025\000\083\000\025\000\037\000\089\000\002\000\004\000\040\000\
\007\000\041\000\008\000\003\000\004\000\005\000\006\000\007\000\
\044\000\006\000\025\000\057\000\088\000\000\000\047\000\048\000\
\025\000\000\000\090\000\091\000\025\000\092\000\000\000\093\000\
\000\000\000\000\008\000\009\000\096\000\097\000\010\000\011\000\
\012\000\003\000\004\000\005\000\006\000\007\000\000\000\013\000\
\000\000\014\000\015\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\008\000\009\000\000\000\000\000\010\000\011\000\012\000\044\000\
\045\000\046\000\000\000\000\000\000\000\047\000\048\000\014\000\
\015\000\016\000\018\000\000\000\018\000\000\000\000\000\018\000\
\018\000\018\000\000\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\000\000\018\000\000\000\018\000\018\000\000\000\
\000\000\018\000\017\000\000\000\017\000\018\000\000\000\017\000\
\017\000\017\000\000\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\017\000\000\000\017\000\000\000\017\000\017\000\000\000\
\000\000\017\000\022\000\000\000\022\000\017\000\000\000\022\000\
\022\000\022\000\000\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\022\000\000\000\022\000\000\000\022\000\022\000\000\000\
\000\000\022\000\021\000\000\000\021\000\022\000\000\000\021\000\
\021\000\021\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\021\000\000\000\021\000\000\000\021\000\021\000\000\000\
\000\000\021\000\035\000\000\000\035\000\021\000\000\000\035\000\
\035\000\035\000\000\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\035\000\000\000\035\000\000\000\035\000\035\000\000\000\
\000\000\035\000\033\000\000\000\033\000\035\000\000\000\033\000\
\033\000\033\000\000\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\033\000\000\000\033\000\000\000\033\000\033\000\000\000\
\000\000\033\000\019\000\000\000\019\000\033\000\000\000\019\000\
\019\000\019\000\000\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\019\000\000\000\019\000\000\000\020\000\000\000\020\000\
\000\000\019\000\020\000\020\000\020\000\019\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\020\000\000\000\020\000\035\000\
\000\000\036\000\000\000\000\000\020\000\000\000\000\000\037\000\
\020\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\000\000\
\000\000\000\000\047\000\048\000\000\000\000\000\027\000\000\000\
\027\000\000\000\051\000\027\000\027\000\027\000\000\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\000\000\030\000\000\000\030\000\000\000\027\000\030\000\030\000\
\030\000\027\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\000\000\032\000\000\000\032\000\000\000\
\030\000\032\000\032\000\032\000\030\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\029\000\
\000\000\029\000\000\000\032\000\029\000\029\000\029\000\032\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\031\000\000\000\031\000\000\000\029\000\031\000\
\031\000\031\000\029\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\000\000\028\000\000\000\028\000\
\000\000\031\000\028\000\028\000\028\000\031\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\035\000\
\000\000\036\000\000\000\000\000\028\000\000\000\000\000\037\000\
\028\000\038\000\039\000\040\000\041\000\042\000\043\000\024\000\
\024\000\024\000\000\000\024\000\044\000\045\000\046\000\000\000\
\000\000\000\000\047\000\048\000\000\000\000\000\084\000\000\000\
\038\000\038\000\038\000\024\000\038\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\035\000\
\000\000\036\000\038\000\000\000\049\000\000\000\038\000\037\000\
\000\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\035\000\
\000\000\036\000\047\000\048\000\000\000\077\000\000\000\037\000\
\000\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\035\000\
\000\000\036\000\047\000\048\000\000\000\000\000\000\000\037\000\
\085\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\035\000\
\000\000\036\000\047\000\048\000\000\000\000\000\000\000\037\000\
\087\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\035\000\
\000\000\036\000\047\000\048\000\000\000\000\000\094\000\037\000\
\000\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\035\000\
\000\000\036\000\047\000\048\000\000\000\000\000\095\000\037\000\
\000\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\035\000\
\000\000\036\000\047\000\048\000\000\000\000\000\000\000\037\000\
\000\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\035\000\
\000\000\000\000\047\000\048\000\000\000\000\000\000\000\037\000\
\000\000\038\000\039\000\040\000\041\000\042\000\043\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\046\000\000\000\
\000\000\000\000\047\000\048\000\037\000\000\000\038\000\039\000\
\040\000\041\000\042\000\043\000\000\000\000\000\000\000\000\000\
\000\000\044\000\045\000\046\000\000\000\000\000\000\000\047\000\
\048\000"

let yycheck = "\001\000\
\015\001\001\000\032\000\005\001\005\001\005\001\008\000\009\000\
\010\000\011\000\012\000\000\000\014\000\028\001\044\000\032\001\
\028\001\007\001\023\001\009\001\023\001\005\001\012\001\013\001\
\014\001\005\001\016\001\028\001\028\001\012\001\012\001\012\001\
\034\000\035\000\036\000\013\001\038\000\039\000\040\000\041\000\
\042\000\043\000\032\001\045\000\046\000\047\000\048\000\077\000\
\038\001\051\000\052\000\009\001\042\001\055\000\012\001\013\001\
\014\001\012\001\016\001\015\001\017\001\000\000\032\001\012\001\
\012\001\012\001\012\001\001\001\002\001\003\001\004\001\005\001\
\028\001\032\001\032\001\034\000\082\000\255\255\034\001\035\001\
\038\001\255\255\084\000\085\000\042\001\087\000\255\255\089\000\
\255\255\255\255\024\001\025\001\094\000\095\000\028\001\029\001\
\030\001\001\001\002\001\003\001\004\001\005\001\255\255\037\001\
\255\255\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\255\255\255\255\028\001\029\001\030\001\028\001\
\029\001\030\001\255\255\255\255\255\255\034\001\035\001\039\001\
\040\001\041\001\007\001\255\255\009\001\255\255\255\255\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\255\255\034\001\035\001\255\255\
\255\255\038\001\007\001\255\255\009\001\042\001\255\255\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\255\255\034\001\035\001\255\255\
\255\255\038\001\007\001\255\255\009\001\042\001\255\255\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\255\255\034\001\035\001\255\255\
\255\255\038\001\007\001\255\255\009\001\042\001\255\255\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\255\255\034\001\035\001\255\255\
\255\255\038\001\007\001\255\255\009\001\042\001\255\255\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\255\255\034\001\035\001\255\255\
\255\255\038\001\007\001\255\255\009\001\042\001\255\255\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\255\255\034\001\035\001\255\255\
\255\255\038\001\007\001\255\255\009\001\042\001\255\255\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\255\255\007\001\255\255\009\001\
\255\255\038\001\012\001\013\001\014\001\042\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\032\001\007\001\
\255\255\009\001\255\255\255\255\038\001\255\255\255\255\015\001\
\042\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\255\255\
\255\255\255\255\034\001\035\001\255\255\255\255\007\001\255\255\
\009\001\255\255\042\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\032\001\
\255\255\007\001\255\255\009\001\255\255\038\001\012\001\013\001\
\014\001\042\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\032\001\255\255\007\001\255\255\009\001\255\255\
\038\001\012\001\013\001\014\001\042\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\032\001\255\255\007\001\
\255\255\009\001\255\255\038\001\012\001\013\001\014\001\042\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\032\001\255\255\007\001\255\255\009\001\255\255\038\001\012\001\
\013\001\014\001\042\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\032\001\255\255\007\001\255\255\009\001\
\255\255\038\001\012\001\013\001\014\001\042\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\007\001\
\255\255\009\001\255\255\255\255\038\001\255\255\255\255\015\001\
\042\001\017\001\018\001\019\001\020\001\021\001\022\001\012\001\
\013\001\014\001\255\255\016\001\028\001\029\001\030\001\255\255\
\255\255\255\255\034\001\035\001\255\255\255\255\038\001\255\255\
\012\001\013\001\014\001\032\001\016\001\255\255\255\255\255\255\
\255\255\038\001\255\255\255\255\255\255\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\032\001\255\255\255\255\007\001\
\255\255\009\001\038\001\255\255\012\001\255\255\042\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\007\001\
\255\255\009\001\034\001\035\001\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\007\001\
\255\255\009\001\034\001\035\001\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\007\001\
\255\255\009\001\034\001\035\001\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\007\001\
\255\255\009\001\034\001\035\001\255\255\255\255\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\007\001\
\255\255\009\001\034\001\035\001\255\255\255\255\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\007\001\
\255\255\009\001\034\001\035\001\255\255\255\255\255\255\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\007\001\
\255\255\255\255\034\001\035\001\255\255\255\255\255\255\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\255\255\
\255\255\255\255\034\001\035\001\015\001\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\255\255\255\255\255\255\034\001\
\035\001"

let yynames_const = "\
  EOF\000\
  AMPER\000\
  AMPER_AMPER\000\
  BAR\000\
  BAR_BAR\000\
  CLOSE_BRACE\000\
  CLOSE_BRACKET\000\
  CLOSE_PAREN\000\
  COMMA\000\
  COLON\000\
  DOT\000\
  DOT_DOT\000\
  EQUAL\000\
  GREATER\000\
  GREATER_EQUAL\000\
  LESS\000\
  LESS_EQUAL\000\
  LESS_GREATER\000\
  LESS_MINUS\000\
  NOT\000\
  ONE_BAR\000\
  OPEN_BRACE\000\
  OPEN_BRACKET\000\
  OPEN_PAREN\000\
  PLUS\000\
  MINUS\000\
  MINUS_GREATER\000\
  SEMI_COLON\000\
  SHARP\000\
  SLASH\000\
  STAR\000\
  TO\000\
  DEF\000\
  ELSE\000\
  IF\000\
  PI\000\
  SIGMA\000\
  THEN\000\
  WHEN\000\
  WITH\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  STRING\000\
  BOOL\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'phrases) in
    Obj.repr(
# 127 "fisca_parser.mly"
                ( Program _1 )
# 465 "fisca_parser.ml"
               : Fisca_types.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "fisca_parser.mly"
    ( [] )
# 471 "fisca_parser.ml"
               : 'phrases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'phrase) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'phrases) in
    Obj.repr(
# 132 "fisca_parser.mly"
                              ( _1 :: _3 )
# 479 "fisca_parser.ml"
               : 'phrases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 136 "fisca_parser.mly"
               ( Expression _1 )
# 486 "fisca_parser.ml"
               : 'phrase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'definition) in
    Obj.repr(
# 137 "fisca_parser.mly"
               ( Definition _1 )
# 493 "fisca_parser.ml"
               : 'phrase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'variables) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 142 "fisca_parser.mly"
    (
      {
        defined_ident = _2;
        variables = _4;
        body = _7;
      }
    )
# 508 "fisca_parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "fisca_parser.mly"
    ( [] )
# 514 "fisca_parser.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 153 "fisca_parser.mly"
          ( [ _1 ] )
# 521 "fisca_parser.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variables) in
    Obj.repr(
# 154 "fisca_parser.mly"
                          ( _1 :: _3 )
# 529 "fisca_parser.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 158 "fisca_parser.mly"
          ( _1 )
# 536 "fisca_parser.ml"
               : 'label))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 162 "fisca_parser.mly"
        ( Int _1 )
# 543 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "fisca_parser.mly"
          ( Float _1 )
# 550 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 164 "fisca_parser.mly"
           ( String _1 )
# 557 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 165 "fisca_parser.mly"
         ( Bool _1 )
# 564 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 166 "fisca_parser.mly"
          ( Ident _1 )
# 571 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 168 "fisca_parser.mly"
    ( Apply (_1, _3) )
# 579 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 169 "fisca_parser.mly"
                     ( Uminus _2 )
# 586 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 170 "fisca_parser.mly"
                    ( Uplus _2 )
# 593 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 171 "fisca_parser.mly"
                               ( Sum (_1, _3) )
# 601 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 172 "fisca_parser.mly"
                                ( Sub (_1, _3) )
# 609 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 173 "fisca_parser.mly"
                               ( Product (_1, _3) )
# 617 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 174 "fisca_parser.mly"
                                ( Divide (_1, _3) )
# 625 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 176 "fisca_parser.mly"
                   ( Not _2 )
# 632 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 177 "fisca_parser.mly"
                                  ( make_comparison Eq _1 _3 )
# 640 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 178 "fisca_parser.mly"
                                      ( make_comparison Neq _1 _3 )
# 648 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 179 "fisca_parser.mly"
                       ( Characteristic _2 )
# 655 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 181 "fisca_parser.mly"
                                ( make_comparison Eq _1 _3 )
# 663 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 182 "fisca_parser.mly"
                                       ( make_comparison Neq _1 _3 )
# 671 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 183 "fisca_parser.mly"
                               ( make_comparison Lt _1 _3 )
# 679 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 184 "fisca_parser.mly"
                                  ( make_comparison Gt _1 _3 )
# 687 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 185 "fisca_parser.mly"
                                     ( make_comparison Le _1 _3 )
# 695 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 186 "fisca_parser.mly"
                                        ( make_comparison Ge _1 _3 )
# 703 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 189 "fisca_parser.mly"
    ( Sigma (make_reduce_definition _2 _4 _6 _8) )
# 713 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 191 "fisca_parser.mly"
    ( Sigma_list _3 )
# 720 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 194 "fisca_parser.mly"
    ( Pi (make_reduce_definition _2 _4 _6 _8) )
# 730 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 196 "fisca_parser.mly"
    ( Pi_list _3 )
# 737 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'label) in
    Obj.repr(
# 199 "fisca_parser.mly"
    ( Field (_1, _3) )
# 745 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 202 "fisca_parser.mly"
    ( If (_2, _4, _6) )
# 754 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 204 "fisca_parser.mly"
                                      ( Expression_parens _2 )
# 761 "fisca_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 208 "fisca_parser.mly"
    ( [] )
# 767 "fisca_parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 209 "fisca_parser.mly"
               ( [ _1 ] )
# 774 "fisca_parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments) in
    Obj.repr(
# 210 "fisca_parser.mly"
                               ( _1 :: _3 )
# 782 "fisca_parser.ml"
               : 'arguments))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Fisca_types.program)
