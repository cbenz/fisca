# 15 "fisca_lexer.mll"
 

(* Prelude part: this is pure Caml. *)

open Lexing;;
open Fisca_parser;;

(* Lexer table definitions. *)

(** {6 The keyword table} *)

let hashtbl_of_bindings bdgs =
  let l = List.length bdgs in
  let t = Hashtbl.create l in
  List.iter (fun (k, v) -> Hashtbl.add t k v) bdgs;
  t
;;

let keyword_table =
  hashtbl_of_bindings [
    "def", DEF;
    "else", ELSE;
    "false", BOOL "false";
    "if", IF;
    "not", NOT;
    "pi", PI;
    "sigma", SIGMA;
    "true", BOOL "true";

    "then", THEN;
    "when", WHEN;
    "with", WITH;
  ]
;;

let token_of_ident s =
  assert (String.length s > 0);
  try Hashtbl.find keyword_table s with
  | Not_found -> IDENT s
;;

(** {6 Lexing errors} *)

type error =
   | Illegal_character of char
   | Illegal_escape of string
   | Unterminated_string
(** The various errors when lexing. *)
;;

exception Error of error * Lexing.position * Lexing.position;;

(** {6 Explaining lexing errors} *)

let report_error ppf = function
  | Illegal_character c ->
      Format.fprintf ppf "Illegal character (%C)" c
  | Illegal_escape s ->
      Format.fprintf ppf "Illegal escape (%S)" s
  | Unterminated_string ->
      Format.fprintf ppf "Unterminated string"
;;

let token_of_string s = STRING s;;

(** {6 Keeping the internal buffer locations up to date} *)

let update_loc lexbuf fname line absolute chars =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p <- {
    pos with
    pos_fname = fname;
    pos_lnum = if absolute then line else pos.pos_lnum + line;
    pos_bol = pos.pos_cnum - chars;
  }
;;

(** Add one to the current line counter of the file being lexed. *)
let incr_line_num lexbuf =
  update_loc lexbuf "manual input" (*(Configuration.get_source_file ())*) 1 false 0
;;

(** {6 Lexing the string tokens} *)
let string_buffer = Buffer.create 256;;

let string_start_pos = ref None;;

let store_string_char c =
  Buffer.add_char string_buffer c
;;

let get_stored_string () =
  let s = Buffer.contents string_buffer in
  Buffer.reset string_buffer;
  s
;;

let char_for_character = function
  | '\\' -> '\\'
  | '\"' -> '\"'
  | 'n' -> '\n'
  | 't' -> '\t'
  | 'b' -> '\b'
  | 'r' -> '\r'
  | c ->
    Configuration.fatal_error
      (Printf.sprintf "Unknown escaped character %C" c)
;;


# 113 "fisca_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\222\255\223\255\224\255\001\000\002\000\002\000\030\000\
    \235\255\237\255\002\000\240\255\242\255\243\255\244\255\245\255\
    \246\255\247\255\248\255\249\255\082\000\160\000\251\255\237\000\
    \003\001\005\000\001\000\255\255\225\255\035\001\057\001\067\001\
    \247\000\238\255\231\255\234\255\230\255\228\255\226\255\033\001\
    \250\255\251\255\037\001\015\000\065\001\061\001\123\001\255\255\
    \252\255\253\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\028\000\026\000\023\000\022\000\
    \255\255\255\255\016\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\000\005\000\255\255\002\000\
    \002\000\001\000\000\000\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\005\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
    \000\000\000\000\048\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\027\000\027\000\025\000\026\000\025\000\000\000\
    \000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \046\000\045\000\000\000\000\000\044\000\000\000\000\000\000\000\
    \025\000\000\000\022\000\003\000\000\000\025\000\004\000\038\000\
    \019\000\018\000\009\000\011\000\015\000\010\000\012\000\046\000\
    \023\000\024\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\014\000\013\000\007\000\008\000\006\000\036\000\
    \033\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\034\000\035\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\017\000\005\000\016\000\037\000\020\000\
    \000\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\000\000\000\000\000\000\
    \000\000\020\000\000\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\021\000\000\000\000\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\000\000\000\000\000\000\000\000\021\000\
    \002\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\030\000\000\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\030\000\029\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\043\000\000\000\000\000\045\000\049\000\
    \029\000\000\000\045\000\045\000\023\000\000\000\032\000\000\000\
    \032\000\000\000\029\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\045\000\000\000\047\000\
    \000\000\045\000\023\000\047\000\000\000\000\000\000\000\000\000\
    \029\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\042\000\029\000\028\000\
    \000\000\049\000\000\000\000\000\046\000\045\000\000\000\049\000\
    \044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\049\000\000\000\000\000\000\000\049\000\
    \030\000\049\000\000\000\046\000\000\000\000\000\029\000\000\000\
    \000\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\041\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\026\000\000\000\000\000\025\000\255\255\
    \255\255\025\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \043\000\043\000\255\255\255\255\043\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\025\000\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\007\000\007\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\020\000\
    \255\255\255\255\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\255\255\255\255\255\255\
    \255\255\020\000\255\255\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\021\000\255\255\255\255\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\255\255\255\255\255\255\255\255\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\023\000\255\255\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\024\000\023\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\039\000\255\255\255\255\045\000\042\000\
    \024\000\255\255\044\000\044\000\023\000\255\255\029\000\255\255\
    \029\000\255\255\023\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\045\000\255\255\045\000\
    \255\255\044\000\024\000\044\000\255\255\255\255\255\255\255\255\
    \024\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\039\000\030\000\024\000\
    \255\255\042\000\255\255\255\255\046\000\046\000\255\255\042\000\
    \046\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\042\000\255\255\255\255\255\255\042\000\
    \030\000\042\000\255\255\046\000\255\255\255\255\030\000\255\255\
    \255\255\255\255\031\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\039\000\255\255\255\255\255\255\042\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 177 "fisca_lexer.mll"
    ( incr_line_num lexbuf;
      token lexbuf )
# 323 "fisca_lexer.ml"

  | 1 ->
# 180 "fisca_lexer.mll"
    ( token lexbuf )
# 328 "fisca_lexer.ml"

  | 2 ->
# 184 "fisca_lexer.mll"
    ( INT (Lexing.lexeme lexbuf) )
# 333 "fisca_lexer.ml"

  | 3 ->
# 186 "fisca_lexer.mll"
    ( FLOAT (Lexing.lexeme lexbuf) )
# 338 "fisca_lexer.ml"

  | 4 ->
# 190 "fisca_lexer.mll"
    (
      string_start_pos :=
        Some (lexbuf.lex_start_p, lexbuf.lex_curr_p);
      string lexbuf;
      begin match !string_start_pos with
      | Some (start_pos, _) -> lexbuf.lex_start_p <- start_pos
      | _ -> assert false end;
      let s = get_stored_string () in
      token_of_string s
    )
# 352 "fisca_lexer.ml"

  | 5 ->
# 203 "fisca_lexer.mll"
    ( token_of_ident (Lexing.lexeme lexbuf) )
# 357 "fisca_lexer.ml"

  | 6 ->
# 206 "fisca_lexer.mll"
        ( OPEN_PAREN )
# 362 "fisca_lexer.ml"

  | 7 ->
# 207 "fisca_lexer.mll"
        ( CLOSE_PAREN )
# 367 "fisca_lexer.ml"

  | 8 ->
# 208 "fisca_lexer.mll"
        ( OPEN_BRACE )
# 372 "fisca_lexer.ml"

  | 9 ->
# 209 "fisca_lexer.mll"
        ( CLOSE_BRACE )
# 377 "fisca_lexer.ml"

  | 10 ->
# 210 "fisca_lexer.mll"
        ( COMMA )
# 382 "fisca_lexer.ml"

  | 11 ->
# 211 "fisca_lexer.mll"
        ( COLON )
# 387 "fisca_lexer.ml"

  | 12 ->
# 212 "fisca_lexer.mll"
        ( SEMI_COLON )
# 392 "fisca_lexer.ml"

  | 13 ->
# 213 "fisca_lexer.mll"
        ( DOT )
# 397 "fisca_lexer.ml"

  | 14 ->
# 214 "fisca_lexer.mll"
        ( DOT_DOT )
# 402 "fisca_lexer.ml"

  | 15 ->
# 215 "fisca_lexer.mll"
        ( PLUS )
# 407 "fisca_lexer.ml"

  | 16 ->
# 216 "fisca_lexer.mll"
        ( MINUS )
# 412 "fisca_lexer.ml"

  | 17 ->
# 217 "fisca_lexer.mll"
         ( MINUS_GREATER )
# 417 "fisca_lexer.ml"

  | 18 ->
# 218 "fisca_lexer.mll"
        ( STAR )
# 422 "fisca_lexer.ml"

  | 19 ->
# 219 "fisca_lexer.mll"
        ( SLASH )
# 427 "fisca_lexer.ml"

  | 20 ->
# 220 "fisca_lexer.mll"
        ( EQUAL )
# 432 "fisca_lexer.ml"

  | 21 ->
# 221 "fisca_lexer.mll"
         ( LESS_GREATER )
# 437 "fisca_lexer.ml"

  | 22 ->
# 222 "fisca_lexer.mll"
        ( LESS )
# 442 "fisca_lexer.ml"

  | 23 ->
# 223 "fisca_lexer.mll"
        ( GREATER )
# 447 "fisca_lexer.ml"

  | 24 ->
# 224 "fisca_lexer.mll"
         ( LESS_EQUAL )
# 452 "fisca_lexer.ml"

  | 25 ->
# 225 "fisca_lexer.mll"
         ( GREATER_EQUAL )
# 457 "fisca_lexer.ml"

  | 26 ->
# 226 "fisca_lexer.mll"
        ( BAR )
# 462 "fisca_lexer.ml"

  | 27 ->
# 227 "fisca_lexer.mll"
         ( BAR_BAR )
# 467 "fisca_lexer.ml"

  | 28 ->
# 228 "fisca_lexer.mll"
        ( AMPER )
# 472 "fisca_lexer.ml"

  | 29 ->
# 229 "fisca_lexer.mll"
         ( AMPER_AMPER )
# 477 "fisca_lexer.ml"

  | 30 ->
# 230 "fisca_lexer.mll"
         ( ONE_BAR )
# 482 "fisca_lexer.ml"

  | 31 ->
# 232 "fisca_lexer.mll"
        ( SHARP )
# 487 "fisca_lexer.ml"

  | 32 ->
# 234 "fisca_lexer.mll"
        ( EOF )
# 492 "fisca_lexer.ml"

  | 33 ->
# 236 "fisca_lexer.mll"
    ( raise
        (Error
           (Illegal_character (Lexing.lexeme_char lexbuf 0),
            lexbuf.lex_start_p,
            lexbuf.lex_curr_p)) )
# 501 "fisca_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 39
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 244 "fisca_lexer.mll"
    ( incr_line_num lexbuf;
      string lexbuf )
# 514 "fisca_lexer.ml"

  | 1 ->
# 247 "fisca_lexer.mll"
    ( () )
# 519 "fisca_lexer.ml"

  | 2 ->
# 250 "fisca_lexer.mll"
    ( store_string_char (char_for_character (Lexing.lexeme_char lexbuf 1));
      string lexbuf )
# 525 "fisca_lexer.ml"

  | 3 ->
# 254 "fisca_lexer.mll"
    ( raise
        (Error
           (Illegal_escape (Lexing.lexeme lexbuf),
            lexbuf.lex_start_p,
            lexbuf.lex_curr_p)) )
# 534 "fisca_lexer.ml"

  | 4 ->
# 260 "fisca_lexer.mll"
    ( match !string_start_pos with
      | Some (start_pos, end_pos) ->
        raise (Error (Unterminated_string, start_pos, end_pos))
      | _ -> assert false )
# 542 "fisca_lexer.ml"

  | 5 ->
# 265 "fisca_lexer.mll"
    ( store_string_char (Lexing.lexeme_char lexbuf 0);
      string lexbuf )
# 548 "fisca_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

